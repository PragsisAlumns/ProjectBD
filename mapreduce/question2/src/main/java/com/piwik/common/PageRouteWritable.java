package com.piwik.common;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.WritableComparable;

public class PageRouteWritable implements WritableComparable<PageRouteWritable> {
	
  String page;	
  String route;
  

  /**
   * Empty constructor - required for serialization.
   */ 
  public PageRouteWritable() {

  }

  /**
   * Constructor with two integers provided as input.
   */ 
  public PageRouteWritable(String page, String route) {
    this.page = page;
	this.route = route;
  }

  /**
   * Serializes the fields of this object to out.
   */
  public void write(DataOutput out) throws IOException {
	out.writeUTF(page);
    out.writeUTF(route);
  }

  /**
   * Deserializes the fields of this object from in.
   */
  public void readFields(DataInput in) throws IOException {
	page = in.readUTF();  
    route = in.readUTF();
  }

  /**
   * Compares this object to another IntPairWritable object by
   * comparing the left integer first. If the left integer are equal,
   * then the right integer are compared.
   */
  public int compareTo(PageRouteWritable other) {
	  int result = page.compareTo(other.page);
	  if (result == 0){
		  result = route.compareTo(other.route);
	  }
	 
    return result;
  }

  /* getters and setters for the two objects in the pair */
  public String getPage() {
	  return page;
  }
  
  public String getRoute() {
	  return route;
  }
  
  
  public void  setPage(String page) {
	  this.page = page;
  }
  
  public void  setRoute(String route) {
	  this.route = route;
  }
  

  /**
   * A custom method that returns the two integers in the 
   * IntPairWritable object inside parentheses and separated by
   * a comma. For example: "(left,right)".
   */
  public String toString() {
    return "(" + page + ","+ route +  ")";
  }

  /**
   * The equals method compares two IntPairWritable objects for 
   * equality. The equals and hashCode methods have been automatically
   * generated by Eclipse by right-clicking on an empty line, selecting
   * Source, and then selecting the Generate hashCode() and equals()
   * option. 
   */
  @Override
  public boolean equals(Object obj) {
  	if (this == obj)
  		return true;
  	if (obj == null)
  		return false;
  	if (getClass() != obj.getClass())
  		return false;
  	PageRouteWritable other = (PageRouteWritable) obj;
  	if (page != other.page)
  		return false;
  	if (route != other.route)
  		return false;
  	return true;
  }
  
  
  @Override
  public int hashCode() {
  	final int prime = 31;
  	int result = 1;
  	result = prime * result + ((page == null) ? 0 : page.hashCode());
  	result = prime * result + ((route == null) ? 0 : route.hashCode());
  	return result;
  }

}
